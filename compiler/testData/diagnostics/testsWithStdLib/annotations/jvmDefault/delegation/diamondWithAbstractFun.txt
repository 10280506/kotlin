package

public interface Base {
    public open fun delegatedTest(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Delegate : Test {
    public constructor Delegate()
    public open override /*1*/ fun delegatedTest(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface SubA : Base {
    public open override /*1*/ /*fake_override*/ fun delegatedTest(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface SubB : Base {
    public open override /*1*/ /*fake_override*/ fun delegatedTest(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    @kotlin.jvm.JvmDefault public abstract override /*1*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Test : SubA, SubB {
    public open override /*2*/ /*fake_override*/ fun delegatedTest(): kotlin.String
    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*2*/ /*fake_override*/ fun test(): kotlin.String
    public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class TestClass : Test {
    public constructor TestClass(/*0*/ foo: Test)
    public final val foo: Test
    public open override /*1*/ /*delegation*/ fun delegatedTest(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract override /*1*/ /*fake_override*/ fun test(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
