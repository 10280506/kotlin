description = 'Kotlin Standard Library JDK 9 extension'

apply plugin: 'kotlin'
apply plugin: 'pill-configurable'

configureJvm6Project(project)
configureDist(project)
configurePublishing(project)
ext.javaHome = JDK_9
ext.jvmTarget = "1.8"

pill {
    importAsLibrary = true
}

dependencies {
    compile project(':kotlin-stdlib')
    compile project(':kotlin-stdlib-jdk8')
    testCompile project(':kotlin-test:kotlin-test-junit')
}

sourceSets {
    main {
        kotlin {
            srcDir 'src'
        }
    }
    java9 {
        java {
            srcDir 'java9'
        }
    }
}

sourceCompatibility = 9

jar {
    manifestAttributes(manifest, project, 'Main' /*true*/)
    // TODO: enable as soon as this doesn't cause D8/DX to crash
    // from sourceSets.java9.output
}

task modularJar(type: Jar) {
    dependsOn(jar)
    manifestAttributes(manifest, project, 'Main', true)
    classifier = 'modular'

    from zipTree(jar.outputs.files.singleFile)
    from sourceSets.java9.output
}


artifacts {
    archives sourcesJar
    archives javadocJar
    archives modularJar
}

dist {
    from (jar, sourcesJar)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions.jdkHome = JDK_9
    kotlinOptions.jvmTarget = 1.8
}

compileKotlin {
    kotlinOptions.freeCompilerArgs = [
            "-Xallow-kotlin-package",
            "-Xmultifile-parts-inherit",
            "-Xnormalize-constructor-calls=enable",
            "-module-name", project.name
    ]
}

compileTestKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xallow-kotlin-package", "-Xmulti-platform", "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"]
}

compileJava9Sources(project, 'kotlin.stdlib.jdk9')

